//created on: Nov 26, 2014
package rules

//list any import classes here.
import org.hawkular.alerts.condition.Alert;
import org.hawkular.alerts.condition.AvailabilityCondition;
import org.hawkular.alerts.condition.AvailabilityConditionEval;
import org.hawkular.alerts.condition.ConditionEval;
import org.hawkular.alerts.condition.CompareCondition;
import org.hawkular.alerts.condition.CompareConditionEval;
import org.hawkular.alerts.condition.StringCondition;
import org.hawkular.alerts.condition.StringConditionEval;
import org.hawkular.alerts.condition.ThresholdCondition;
import org.hawkular.alerts.condition.ThresholdConditionEval;
import org.hawkular.alerts.condition.ThresholdRangeCondition;
import org.hawkular.alerts.condition.ThresholdRangeConditionEval;
import org.hawkular.alerts.dampening.Dampening;
import org.hawkular.alerts.data.Availability;
import org.hawkular.alerts.data.Availability.AvailabilityType
import org.hawkular.alerts.data.NumericData;
import org.hawkular.alerts.data.StringData;
import org.hawkular.alerts.trigger.Trigger;

import java.util.HashSet;



//declare any global variables here


////// CONDITION MATCHING

rule Threshold
    when 
        $t : Trigger( active == true, $tid : id )
        $c : ThresholdCondition ( triggerId == $tid, $did : dataId )
        NumericData( $did == id, $value : value)
    then
        ThresholdConditionEval ce = new ThresholdConditionEval($c, (Double)$value);
        System.out.println( "Threshold Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog() );
        insert( ce );
end

rule ThresholdRange
    when 
        $t : Trigger( active == true, $tid : id )
        $c : ThresholdRangeCondition ( triggerId == $tid, $did : dataId )
        NumericData( $did == id, $value : value)
    then
        ThresholdRangeConditionEval ce = new ThresholdRangeConditionEval($c, (Double)$value);
        System.out.println( "ThresholdRange Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog() );
        insert( ce );
end

rule Compare
    when 
        $t : Trigger( active == true, $tid : id )
        $c : CompareCondition ( triggerId == $tid, $d1id : data1Id, $d2id : data2Id )
        NumericData( $d1id == id, $value1 : value)
        NumericData( $d2id == id, $value2 : value)
    then
        CompareConditionEval ce = new CompareConditionEval($c, (Double)$value1, (Double)$value2);
        System.out.println( "Compare Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog() );
        insert( ce );
end

rule Availability
    when 
        $t : Trigger( active == true, $tid : id )
        $c : AvailabilityCondition ( triggerId == $tid, $did : dataId )
        Availability( $did == id, $value : value)
    then
        AvailabilityConditionEval ce = new AvailabilityConditionEval($c, (AvailabilityType)$value);
        System.out.println( "Availability Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog() );
        insert( ce );
end

rule String
    when 
        $t : Trigger( active == true, $tid : id )
        $c : StringCondition ( triggerId == $tid, $did : dataId  )
        StringData( $did == id, $value : value)
    then
        StringConditionEval ce = new StringConditionEval($c, (String)$value);
        System.out.println( "String Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog() );
        insert( ce );
end


rule RemoveProcessedData
    when 
        $d : NumericData()
    then
        System.out.println( "Retracting " + $d + "..." );
        retract ( $d );
end



////// DAMPENING

rule ProvideDefaultDampening
    when
        $t : Trigger( active == true, $tid : id )
        not Dampening( triggerId == $tid )
    then
        System.out.println( "Adding default dampening for trigger! " + $t.getId() );
        Dampening d = new Dampening( $tid, Dampening.Type.STRICT, 1, 1, 0L );
        insert(d); 
end


rule DampenOneConditionTrigger
    when
        $t  : Trigger( active == true, $tid : id )
        $d  : Dampening( triggerId == $tid, satisfied == false ) 
        $ce : ConditionEval ( triggerId == $tid, conditionSetSize == 1, conditionSetIndex == 1 )
    then
        System.out.println( "Updating dampening for and then retracting " + $ce );
        $d.perform( $ce );
        update( $d );
        retract ( $ce );
end

rule DampenTwoConditionTrigger
    when
        $t   : Trigger( active == true, $tid : id )
        $d   : Dampening( triggerId == $tid, satisfied == false ) 
        $ce1 : ConditionEval ( triggerId == $tid, conditionSetSize == 2, conditionSetIndex == 1 )
        $ce2 : ConditionEval ( triggerId == $tid, conditionSetSize == 2, conditionSetIndex == 2 )
    then
        System.out.println( "Updating dampening for and then retracting " + $ce1 + $ce2 );
        $d.perform( $ce1, $ce2 );
        update( $d );
        retract ( $ce1 );
        retract ( $ce2 );
end


////// ALERT GENERATION

rule AlertOnSatisfiedDampening
    when
        $t  : Trigger( active == true, $tid : id )
        $d  : Dampening( triggerId == $tid, satisfied == true ) 
    then
        System.out.println( "AlertDampeningOneCondition! " + $d.getLog() );
        //$t.setActive( false );
        //update( $t );
        insert(new Alert( $tid, $d.getSatisfyingEvals() ));
        $d.reset(); 
        update( $d )
end
