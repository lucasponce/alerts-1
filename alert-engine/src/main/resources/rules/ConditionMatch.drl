//created on: Nov 26, 2014
package rules

//list any import classes here.
import com.alert.condition.Alert;
import com.alert.condition.ConditionMatch;
import com.alert.condition.ThresholdCondition;
import com.alert.data.Metric;
import com.alert.trigger.Trigger;

import java.util.HashSet;



//declare any global variables here

import function com.alert.condition.ThresholdCondition.match;

rule Threshold
    when 
        $t  : Trigger( active == true, $tid : id )
        $tc : ThresholdCondition ( triggerId == $tid, $mid : metricId, $th : threshold, $op : operator)
        $m : Metric( $mid == id, $value : value)
        eval( match( $op, $th, $value ) )
    then
        String log = $tc.getLog($value);
        System.out.println( "Threshold Match! " + log );
        ConditionMatch cm = new ConditionMatch($tc, log);
        insertLogical(cm);
end



rule AlertOneCondition
    when
        $t  : Trigger( active == true, $tid : id ) 
        $cm : ConditionMatch ( triggerId == $tid, conditionSetSize == 1, conditionSetIndex == 1, $log : log )
    then
        System.out.println( "AlertOneCondition! " + $log );
        $t.setActive( false );
        update( $t );
        HashSet<ConditionMatch> conditions = new HashSet<ConditionMatch>(1);
        conditions.add($cm);
        insert(new Alert( $tid, conditions )); 
end

rule AlertTwoCondition
    when
        $t  : Trigger( active == true, $tid : id )
        $cm1 : ConditionMatch ( triggerId == $tid, conditionSetSize == 2, conditionSetIndex == 1, $log1 : log )
        $cm2 : ConditionMatch ( triggerId == $tid, conditionSetSize == 2, conditionSetIndex == 2, $log2 : log )
    then
        System.out.println( "AlertTwoCondition!\n  " + $log1 + "\n  " + $log2 );
        $t.setActive( false );
        update( $t );
        HashSet<ConditionMatch> conditions = new HashSet<ConditionMatch>(2);
        conditions.add($cm1);
        conditions.add($cm2);
        insert(new Alert( $tid, conditions ));
end
